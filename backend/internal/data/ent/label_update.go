// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entity"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/group"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/label"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// LabelUpdate is the builder for updating Label entities.
type LabelUpdate struct {
	config
	hooks    []Hook
	mutation *LabelMutation
}

// Where appends a list predicates to the LabelUpdate builder.
func (_u *LabelUpdate) Where(ps ...predicate.Label) *LabelUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LabelUpdate) SetUpdatedAt(v time.Time) *LabelUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *LabelUpdate) SetName(v string) *LabelUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *LabelUpdate) SetNillableName(v *string) *LabelUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *LabelUpdate) SetDescription(v string) *LabelUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *LabelUpdate) SetNillableDescription(v *string) *LabelUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *LabelUpdate) ClearDescription() *LabelUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetColor sets the "color" field.
func (_u *LabelUpdate) SetColor(v string) *LabelUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *LabelUpdate) SetNillableColor(v *string) *LabelUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *LabelUpdate) ClearColor() *LabelUpdate {
	_u.mutation.ClearColor()
	return _u
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (_u *LabelUpdate) SetGroupID(id uuid.UUID) *LabelUpdate {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *LabelUpdate) SetGroup(v *Group) *LabelUpdate {
	return _u.SetGroupID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *LabelUpdate) AddEntityIDs(ids ...uuid.UUID) *LabelUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *LabelUpdate) AddEntities(v ...*Entity) *LabelUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// Mutation returns the LabelMutation object of the builder.
func (_u *LabelUpdate) Mutation() *LabelMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *LabelUpdate) ClearGroup() *LabelUpdate {
	_u.mutation.ClearGroup()
	return _u
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *LabelUpdate) ClearEntities() *LabelUpdate {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *LabelUpdate) RemoveEntityIDs(ids ...uuid.UUID) *LabelUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *LabelUpdate) RemoveEntities(v ...*Entity) *LabelUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LabelUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LabelUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LabelUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LabelUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LabelUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := label.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LabelUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := label.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Label.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := label.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Label.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := label.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Label.color": %w`, err)}
		}
	}
	if _u.mutation.GroupCleared() && len(_u.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Label.group"`)
	}
	return nil
}

func (_u *LabelUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(label.Table, label.Columns, sqlgraph.NewFieldSpec(label.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(label.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(label.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(label.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(label.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(label.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(label.FieldColor, field.TypeString)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   label.GroupTable,
			Columns: []string{label.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   label.GroupTable,
			Columns: []string{label.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   label.EntitiesTable,
			Columns: label.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   label.EntitiesTable,
			Columns: label.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   label.EntitiesTable,
			Columns: label.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{label.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LabelUpdateOne is the builder for updating a single Label entity.
type LabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LabelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LabelUpdateOne) SetUpdatedAt(v time.Time) *LabelUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *LabelUpdateOne) SetName(v string) *LabelUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *LabelUpdateOne) SetNillableName(v *string) *LabelUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *LabelUpdateOne) SetDescription(v string) *LabelUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *LabelUpdateOne) SetNillableDescription(v *string) *LabelUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *LabelUpdateOne) ClearDescription() *LabelUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetColor sets the "color" field.
func (_u *LabelUpdateOne) SetColor(v string) *LabelUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *LabelUpdateOne) SetNillableColor(v *string) *LabelUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *LabelUpdateOne) ClearColor() *LabelUpdateOne {
	_u.mutation.ClearColor()
	return _u
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (_u *LabelUpdateOne) SetGroupID(id uuid.UUID) *LabelUpdateOne {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *LabelUpdateOne) SetGroup(v *Group) *LabelUpdateOne {
	return _u.SetGroupID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *LabelUpdateOne) AddEntityIDs(ids ...uuid.UUID) *LabelUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *LabelUpdateOne) AddEntities(v ...*Entity) *LabelUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// Mutation returns the LabelMutation object of the builder.
func (_u *LabelUpdateOne) Mutation() *LabelMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *LabelUpdateOne) ClearGroup() *LabelUpdateOne {
	_u.mutation.ClearGroup()
	return _u
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *LabelUpdateOne) ClearEntities() *LabelUpdateOne {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *LabelUpdateOne) RemoveEntityIDs(ids ...uuid.UUID) *LabelUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *LabelUpdateOne) RemoveEntities(v ...*Entity) *LabelUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// Where appends a list predicates to the LabelUpdate builder.
func (_u *LabelUpdateOne) Where(ps ...predicate.Label) *LabelUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LabelUpdateOne) Select(field string, fields ...string) *LabelUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Label entity.
func (_u *LabelUpdateOne) Save(ctx context.Context) (*Label, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LabelUpdateOne) SaveX(ctx context.Context) *Label {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LabelUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LabelUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LabelUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := label.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LabelUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := label.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Label.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := label.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Label.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := label.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Label.color": %w`, err)}
		}
	}
	if _u.mutation.GroupCleared() && len(_u.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Label.group"`)
	}
	return nil
}

func (_u *LabelUpdateOne) sqlSave(ctx context.Context) (_node *Label, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(label.Table, label.Columns, sqlgraph.NewFieldSpec(label.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Label.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, label.FieldID)
		for _, f := range fields {
			if !label.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != label.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(label.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(label.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(label.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(label.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(label.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(label.FieldColor, field.TypeString)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   label.GroupTable,
			Columns: []string{label.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   label.GroupTable,
			Columns: []string{label.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   label.EntitiesTable,
			Columns: label.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   label.EntitiesTable,
			Columns: label.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   label.EntitiesTable,
			Columns: label.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Label{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{label.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
