// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/group"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/notifier"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/user"
)

// NotifierCreate is the builder for creating a Notifier entity.
type NotifierCreate struct {
	config
	mutation *NotifierMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotifierCreate) SetCreatedAt(v time.Time) *NotifierCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotifierCreate) SetNillableCreatedAt(v *time.Time) *NotifierCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotifierCreate) SetUpdatedAt(v time.Time) *NotifierCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotifierCreate) SetNillableUpdatedAt(v *time.Time) *NotifierCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetGroupID sets the "group_id" field.
func (_c *NotifierCreate) SetGroupID(v uuid.UUID) *NotifierCreate {
	_c.mutation.SetGroupID(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *NotifierCreate) SetUserID(v uuid.UUID) *NotifierCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetName sets the "name" field.
func (_c *NotifierCreate) SetName(v string) *NotifierCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetURL sets the "url" field.
func (_c *NotifierCreate) SetURL(v string) *NotifierCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *NotifierCreate) SetIsActive(v bool) *NotifierCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *NotifierCreate) SetNillableIsActive(v *bool) *NotifierCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *NotifierCreate) SetID(v uuid.UUID) *NotifierCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *NotifierCreate) SetNillableID(v *uuid.UUID) *NotifierCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetGroup sets the "group" edge to the Group entity.
func (_c *NotifierCreate) SetGroup(v *Group) *NotifierCreate {
	return _c.SetGroupID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_c *NotifierCreate) SetUser(v *User) *NotifierCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the NotifierMutation object of the builder.
func (_c *NotifierCreate) Mutation() *NotifierMutation {
	return _c.mutation
}

// Save creates the Notifier in the database.
func (_c *NotifierCreate) Save(ctx context.Context) (*Notifier, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotifierCreate) SaveX(ctx context.Context) *Notifier {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotifierCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotifierCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotifierCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := notifier.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := notifier.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := notifier.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := notifier.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotifierCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Notifier.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Notifier.updated_at"`)}
	}
	if _, ok := _c.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "Notifier.group_id"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Notifier.user_id"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Notifier.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := notifier.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Notifier.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Notifier.url"`)}
	}
	if v, ok := _c.mutation.URL(); ok {
		if err := notifier.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Notifier.url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Notifier.is_active"`)}
	}
	if len(_c.mutation.GroupIDs()) == 0 {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "Notifier.group"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Notifier.user"`)}
	}
	return nil
}

func (_c *NotifierCreate) sqlSave(ctx context.Context) (*Notifier, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotifierCreate) createSpec() (*Notifier, *sqlgraph.CreateSpec) {
	var (
		_node = &Notifier{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notifier.Table, sqlgraph.NewFieldSpec(notifier.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notifier.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notifier.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(notifier.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(notifier.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(notifier.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := _c.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifier.GroupTable,
			Columns: []string{notifier.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notifier.UserTable,
			Columns: []string{notifier.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotifierCreateBulk is the builder for creating many Notifier entities in bulk.
type NotifierCreateBulk struct {
	config
	err      error
	builders []*NotifierCreate
}

// Save creates the Notifier entities in the database.
func (_c *NotifierCreateBulk) Save(ctx context.Context) ([]*Notifier, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Notifier, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotifierCreateBulk) SaveX(ctx context.Context) []*Notifier {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotifierCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotifierCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
