// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/group"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/groupinvitationtoken"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// GroupInvitationTokenUpdate is the builder for updating GroupInvitationToken entities.
type GroupInvitationTokenUpdate struct {
	config
	hooks    []Hook
	mutation *GroupInvitationTokenMutation
}

// Where appends a list predicates to the GroupInvitationTokenUpdate builder.
func (_u *GroupInvitationTokenUpdate) Where(ps ...predicate.GroupInvitationToken) *GroupInvitationTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GroupInvitationTokenUpdate) SetUpdatedAt(v time.Time) *GroupInvitationTokenUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetToken sets the "token" field.
func (_u *GroupInvitationTokenUpdate) SetToken(v []byte) *GroupInvitationTokenUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *GroupInvitationTokenUpdate) SetExpiresAt(v time.Time) *GroupInvitationTokenUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *GroupInvitationTokenUpdate) SetNillableExpiresAt(v *time.Time) *GroupInvitationTokenUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUses sets the "uses" field.
func (_u *GroupInvitationTokenUpdate) SetUses(v int) *GroupInvitationTokenUpdate {
	_u.mutation.ResetUses()
	_u.mutation.SetUses(v)
	return _u
}

// SetNillableUses sets the "uses" field if the given value is not nil.
func (_u *GroupInvitationTokenUpdate) SetNillableUses(v *int) *GroupInvitationTokenUpdate {
	if v != nil {
		_u.SetUses(*v)
	}
	return _u
}

// AddUses adds value to the "uses" field.
func (_u *GroupInvitationTokenUpdate) AddUses(v int) *GroupInvitationTokenUpdate {
	_u.mutation.AddUses(v)
	return _u
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (_u *GroupInvitationTokenUpdate) SetGroupID(id uuid.UUID) *GroupInvitationTokenUpdate {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (_u *GroupInvitationTokenUpdate) SetNillableGroupID(id *uuid.UUID) *GroupInvitationTokenUpdate {
	if id != nil {
		_u = _u.SetGroupID(*id)
	}
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *GroupInvitationTokenUpdate) SetGroup(v *Group) *GroupInvitationTokenUpdate {
	return _u.SetGroupID(v.ID)
}

// Mutation returns the GroupInvitationTokenMutation object of the builder.
func (_u *GroupInvitationTokenUpdate) Mutation() *GroupInvitationTokenMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *GroupInvitationTokenUpdate) ClearGroup() *GroupInvitationTokenUpdate {
	_u.mutation.ClearGroup()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GroupInvitationTokenUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupInvitationTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GroupInvitationTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupInvitationTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GroupInvitationTokenUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := groupinvitationtoken.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *GroupInvitationTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(groupinvitationtoken.Table, groupinvitationtoken.Columns, sqlgraph.NewFieldSpec(groupinvitationtoken.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(groupinvitationtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(groupinvitationtoken.FieldToken, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(groupinvitationtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Uses(); ok {
		_spec.SetField(groupinvitationtoken.FieldUses, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUses(); ok {
		_spec.AddField(groupinvitationtoken.FieldUses, field.TypeInt, value)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitationtoken.GroupTable,
			Columns: []string{groupinvitationtoken.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitationtoken.GroupTable,
			Columns: []string{groupinvitationtoken.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupinvitationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GroupInvitationTokenUpdateOne is the builder for updating a single GroupInvitationToken entity.
type GroupInvitationTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupInvitationTokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GroupInvitationTokenUpdateOne) SetUpdatedAt(v time.Time) *GroupInvitationTokenUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetToken sets the "token" field.
func (_u *GroupInvitationTokenUpdateOne) SetToken(v []byte) *GroupInvitationTokenUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *GroupInvitationTokenUpdateOne) SetExpiresAt(v time.Time) *GroupInvitationTokenUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *GroupInvitationTokenUpdateOne) SetNillableExpiresAt(v *time.Time) *GroupInvitationTokenUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUses sets the "uses" field.
func (_u *GroupInvitationTokenUpdateOne) SetUses(v int) *GroupInvitationTokenUpdateOne {
	_u.mutation.ResetUses()
	_u.mutation.SetUses(v)
	return _u
}

// SetNillableUses sets the "uses" field if the given value is not nil.
func (_u *GroupInvitationTokenUpdateOne) SetNillableUses(v *int) *GroupInvitationTokenUpdateOne {
	if v != nil {
		_u.SetUses(*v)
	}
	return _u
}

// AddUses adds value to the "uses" field.
func (_u *GroupInvitationTokenUpdateOne) AddUses(v int) *GroupInvitationTokenUpdateOne {
	_u.mutation.AddUses(v)
	return _u
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (_u *GroupInvitationTokenUpdateOne) SetGroupID(id uuid.UUID) *GroupInvitationTokenUpdateOne {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (_u *GroupInvitationTokenUpdateOne) SetNillableGroupID(id *uuid.UUID) *GroupInvitationTokenUpdateOne {
	if id != nil {
		_u = _u.SetGroupID(*id)
	}
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *GroupInvitationTokenUpdateOne) SetGroup(v *Group) *GroupInvitationTokenUpdateOne {
	return _u.SetGroupID(v.ID)
}

// Mutation returns the GroupInvitationTokenMutation object of the builder.
func (_u *GroupInvitationTokenUpdateOne) Mutation() *GroupInvitationTokenMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *GroupInvitationTokenUpdateOne) ClearGroup() *GroupInvitationTokenUpdateOne {
	_u.mutation.ClearGroup()
	return _u
}

// Where appends a list predicates to the GroupInvitationTokenUpdate builder.
func (_u *GroupInvitationTokenUpdateOne) Where(ps ...predicate.GroupInvitationToken) *GroupInvitationTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GroupInvitationTokenUpdateOne) Select(field string, fields ...string) *GroupInvitationTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GroupInvitationToken entity.
func (_u *GroupInvitationTokenUpdateOne) Save(ctx context.Context) (*GroupInvitationToken, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupInvitationTokenUpdateOne) SaveX(ctx context.Context) *GroupInvitationToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GroupInvitationTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupInvitationTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GroupInvitationTokenUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := groupinvitationtoken.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *GroupInvitationTokenUpdateOne) sqlSave(ctx context.Context) (_node *GroupInvitationToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(groupinvitationtoken.Table, groupinvitationtoken.Columns, sqlgraph.NewFieldSpec(groupinvitationtoken.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupInvitationToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupinvitationtoken.FieldID)
		for _, f := range fields {
			if !groupinvitationtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupinvitationtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(groupinvitationtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(groupinvitationtoken.FieldToken, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(groupinvitationtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Uses(); ok {
		_spec.SetField(groupinvitationtoken.FieldUses, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUses(); ok {
		_spec.AddField(groupinvitationtoken.FieldUses, field.TypeInt, value)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitationtoken.GroupTable,
			Columns: []string{groupinvitationtoken.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitationtoken.GroupTable,
			Columns: []string{groupinvitationtoken.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupInvitationToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupinvitationtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
