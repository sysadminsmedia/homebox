// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttachmentsColumns holds the columns for the "attachments" table.
	AttachmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"photo", "manual", "warranty", "attachment", "receipt", "thumbnail"}, Default: "attachment"},
		{Name: "primary", Type: field.TypeBool, Default: false},
		{Name: "title", Type: field.TypeString, Default: ""},
		{Name: "path", Type: field.TypeString, Default: ""},
		{Name: "mime_type", Type: field.TypeString, Default: "application/octet-stream"},
		{Name: "attachment_thumbnail", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "entity_attachments", Type: field.TypeUUID, Nullable: true},
	}
	// AttachmentsTable holds the schema information for the "attachments" table.
	AttachmentsTable = &schema.Table{
		Name:       "attachments",
		Columns:    AttachmentsColumns,
		PrimaryKey: []*schema.Column{AttachmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attachments_attachments_thumbnail",
				Columns:    []*schema.Column{AttachmentsColumns[8]},
				RefColumns: []*schema.Column{AttachmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "attachments_entities_attachments",
				Columns:    []*schema.Column{AttachmentsColumns[9]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AuthRolesColumns holds the columns for the "auth_roles" table.
	AuthRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"admin", "user", "attachments"}, Default: "user"},
		{Name: "auth_tokens_roles", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// AuthRolesTable holds the schema information for the "auth_roles" table.
	AuthRolesTable = &schema.Table{
		Name:       "auth_roles",
		Columns:    AuthRolesColumns,
		PrimaryKey: []*schema.Column{AuthRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_roles_auth_tokens_roles",
				Columns:    []*schema.Column{AuthRolesColumns[2]},
				RefColumns: []*schema.Column{AuthTokensColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AuthTokensColumns holds the columns for the "auth_tokens" table.
	AuthTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeBytes, Unique: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "user_auth_tokens", Type: field.TypeUUID, Nullable: true},
	}
	// AuthTokensTable holds the schema information for the "auth_tokens" table.
	AuthTokensTable = &schema.Table{
		Name:       "auth_tokens",
		Columns:    AuthTokensColumns,
		PrimaryKey: []*schema.Column{AuthTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_tokens_users_auth_tokens",
				Columns:    []*schema.Column{AuthTokensColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "authtokens_token",
				Unique:  false,
				Columns: []*schema.Column{AuthTokensColumns[3]},
			},
		},
	}
	// EntitiesColumns holds the columns for the "entities" table.
	EntitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "import_ref", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "notes", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "quantity", Type: field.TypeInt, Default: 1},
		{Name: "insured", Type: field.TypeBool, Default: false},
		{Name: "archived", Type: field.TypeBool, Default: false},
		{Name: "asset_id", Type: field.TypeInt, Default: 0},
		{Name: "sync_child_entities_locations", Type: field.TypeBool, Default: false},
		{Name: "serial_number", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "model_number", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "manufacturer", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "lifetime_warranty", Type: field.TypeBool, Default: false},
		{Name: "warranty_expires", Type: field.TypeTime, Nullable: true},
		{Name: "warranty_details", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "purchase_time", Type: field.TypeTime, Nullable: true},
		{Name: "purchase_from", Type: field.TypeString, Nullable: true},
		{Name: "purchase_price", Type: field.TypeFloat64, Default: 0},
		{Name: "sold_time", Type: field.TypeTime, Nullable: true},
		{Name: "sold_to", Type: field.TypeString, Nullable: true},
		{Name: "sold_price", Type: field.TypeFloat64, Default: 0},
		{Name: "sold_notes", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "entity_parent", Type: field.TypeUUID, Nullable: true},
		{Name: "entity_location", Type: field.TypeUUID, Nullable: true},
		{Name: "entity_type_entities", Type: field.TypeUUID, Nullable: true},
		{Name: "group_entities", Type: field.TypeUUID},
	}
	// EntitiesTable holds the schema information for the "entities" table.
	EntitiesTable = &schema.Table{
		Name:       "entities",
		Columns:    EntitiesColumns,
		PrimaryKey: []*schema.Column{EntitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entities_entities_parent",
				Columns:    []*schema.Column{EntitiesColumns[25]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entities_entities_location",
				Columns:    []*schema.Column{EntitiesColumns[26]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entities_entity_types_entities",
				Columns:    []*schema.Column{EntitiesColumns[27]},
				RefColumns: []*schema.Column{EntityTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "entities_groups_entities",
				Columns:    []*schema.Column{EntitiesColumns[28]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entity_name",
				Unique:  false,
				Columns: []*schema.Column{EntitiesColumns[3]},
			},
			{
				Name:    "entity_manufacturer",
				Unique:  false,
				Columns: []*schema.Column{EntitiesColumns[14]},
			},
			{
				Name:    "entity_model_number",
				Unique:  false,
				Columns: []*schema.Column{EntitiesColumns[13]},
			},
			{
				Name:    "entity_serial_number",
				Unique:  false,
				Columns: []*schema.Column{EntitiesColumns[12]},
			},
			{
				Name:    "entity_archived",
				Unique:  false,
				Columns: []*schema.Column{EntitiesColumns[9]},
			},
			{
				Name:    "entity_asset_id",
				Unique:  false,
				Columns: []*schema.Column{EntitiesColumns[10]},
			},
		},
	}
	// EntityFieldsColumns holds the columns for the "entity_fields" table.
	EntityFieldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"text", "number", "boolean", "time"}},
		{Name: "text_value", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "number_value", Type: field.TypeInt, Nullable: true},
		{Name: "boolean_value", Type: field.TypeBool, Default: false},
		{Name: "time_value", Type: field.TypeTime},
		{Name: "entity_fields", Type: field.TypeUUID, Nullable: true},
	}
	// EntityFieldsTable holds the schema information for the "entity_fields" table.
	EntityFieldsTable = &schema.Table{
		Name:       "entity_fields",
		Columns:    EntityFieldsColumns,
		PrimaryKey: []*schema.Column{EntityFieldsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entity_fields_entities_fields",
				Columns:    []*schema.Column{EntityFieldsColumns[10]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntityTypesColumns holds the columns for the "entity_types" table.
	EntityTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "icon", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "color", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "is_location", Type: field.TypeBool, Default: false},
		{Name: "group_entity_types", Type: field.TypeUUID},
	}
	// EntityTypesTable holds the schema information for the "entity_types" table.
	EntityTypesTable = &schema.Table{
		Name:       "entity_types",
		Columns:    EntityTypesColumns,
		PrimaryKey: []*schema.Column{EntityTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entity_types_groups_entity_types",
				Columns:    []*schema.Column{EntityTypesColumns[8]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entitytype_name",
				Unique:  false,
				Columns: []*schema.Column{EntityTypesColumns[3]},
			},
			{
				Name:    "entitytype_is_location",
				Unique:  false,
				Columns: []*schema.Column{EntityTypesColumns[7]},
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "currency", Type: field.TypeString, Default: "usd"},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// GroupInvitationTokensColumns holds the columns for the "group_invitation_tokens" table.
	GroupInvitationTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeBytes, Unique: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "uses", Type: field.TypeInt, Default: 0},
		{Name: "group_invitation_tokens", Type: field.TypeUUID, Nullable: true},
	}
	// GroupInvitationTokensTable holds the schema information for the "group_invitation_tokens" table.
	GroupInvitationTokensTable = &schema.Table{
		Name:       "group_invitation_tokens",
		Columns:    GroupInvitationTokensColumns,
		PrimaryKey: []*schema.Column{GroupInvitationTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_invitation_tokens_groups_invitation_tokens",
				Columns:    []*schema.Column{GroupInvitationTokensColumns[6]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LabelsColumns holds the columns for the "labels" table.
	LabelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "color", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "group_labels", Type: field.TypeUUID},
	}
	// LabelsTable holds the schema information for the "labels" table.
	LabelsTable = &schema.Table{
		Name:       "labels",
		Columns:    LabelsColumns,
		PrimaryKey: []*schema.Column{LabelsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "labels_groups_labels",
				Columns:    []*schema.Column{LabelsColumns[6]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MaintenanceEntriesColumns holds the columns for the "maintenance_entries" table.
	MaintenanceEntriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "date", Type: field.TypeTime, Nullable: true},
		{Name: "scheduled_date", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2500},
		{Name: "cost", Type: field.TypeFloat64, Default: 0},
		{Name: "entity_id", Type: field.TypeUUID},
	}
	// MaintenanceEntriesTable holds the schema information for the "maintenance_entries" table.
	MaintenanceEntriesTable = &schema.Table{
		Name:       "maintenance_entries",
		Columns:    MaintenanceEntriesColumns,
		PrimaryKey: []*schema.Column{MaintenanceEntriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "maintenance_entries_entities_maintenance_entries",
				Columns:    []*schema.Column{MaintenanceEntriesColumns[8]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NotifiersColumns holds the columns for the "notifiers" table.
	NotifiersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "url", Type: field.TypeString, Size: 2083},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "group_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// NotifiersTable holds the schema information for the "notifiers" table.
	NotifiersTable = &schema.Table{
		Name:       "notifiers",
		Columns:    NotifiersColumns,
		PrimaryKey: []*schema.Column{NotifiersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifiers_groups_notifiers",
				Columns:    []*schema.Column{NotifiersColumns[6]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "notifiers_users_notifiers",
				Columns:    []*schema.Column{NotifiersColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "notifier_user_id",
				Unique:  false,
				Columns: []*schema.Column{NotifiersColumns[7]},
			},
			{
				Name:    "notifier_user_id_is_active",
				Unique:  false,
				Columns: []*schema.Column{NotifiersColumns[7], NotifiersColumns[5]},
			},
			{
				Name:    "notifier_group_id",
				Unique:  false,
				Columns: []*schema.Column{NotifiersColumns[6]},
			},
			{
				Name:    "notifier_group_id_is_active",
				Unique:  false,
				Columns: []*schema.Column{NotifiersColumns[6], NotifiersColumns[5]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "password", Type: field.TypeString, Size: 255},
		{Name: "is_superuser", Type: field.TypeBool, Default: false},
		{Name: "superuser", Type: field.TypeBool, Default: false},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "owner"}, Default: "user"},
		{Name: "activated_on", Type: field.TypeTime, Nullable: true},
		{Name: "group_users", Type: field.TypeUUID},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_groups_users",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LabelEntitiesColumns holds the columns for the "label_entities" table.
	LabelEntitiesColumns = []*schema.Column{
		{Name: "label_id", Type: field.TypeUUID},
		{Name: "entity_id", Type: field.TypeUUID},
	}
	// LabelEntitiesTable holds the schema information for the "label_entities" table.
	LabelEntitiesTable = &schema.Table{
		Name:       "label_entities",
		Columns:    LabelEntitiesColumns,
		PrimaryKey: []*schema.Column{LabelEntitiesColumns[0], LabelEntitiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "label_entities_label_id",
				Columns:    []*schema.Column{LabelEntitiesColumns[0]},
				RefColumns: []*schema.Column{LabelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "label_entities_entity_id",
				Columns:    []*schema.Column{LabelEntitiesColumns[1]},
				RefColumns: []*schema.Column{EntitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttachmentsTable,
		AuthRolesTable,
		AuthTokensTable,
		EntitiesTable,
		EntityFieldsTable,
		EntityTypesTable,
		GroupsTable,
		GroupInvitationTokensTable,
		LabelsTable,
		MaintenanceEntriesTable,
		NotifiersTable,
		UsersTable,
		LabelEntitiesTable,
	}
)

func init() {
	AttachmentsTable.ForeignKeys[0].RefTable = AttachmentsTable
	AttachmentsTable.ForeignKeys[1].RefTable = EntitiesTable
	AuthRolesTable.ForeignKeys[0].RefTable = AuthTokensTable
	AuthTokensTable.ForeignKeys[0].RefTable = UsersTable
	EntitiesTable.ForeignKeys[0].RefTable = EntitiesTable
	EntitiesTable.ForeignKeys[1].RefTable = EntitiesTable
	EntitiesTable.ForeignKeys[2].RefTable = EntityTypesTable
	EntitiesTable.ForeignKeys[3].RefTable = GroupsTable
	EntityFieldsTable.ForeignKeys[0].RefTable = EntitiesTable
	EntityTypesTable.ForeignKeys[0].RefTable = GroupsTable
	GroupInvitationTokensTable.ForeignKeys[0].RefTable = GroupsTable
	LabelsTable.ForeignKeys[0].RefTable = GroupsTable
	MaintenanceEntriesTable.ForeignKeys[0].RefTable = EntitiesTable
	NotifiersTable.ForeignKeys[0].RefTable = GroupsTable
	NotifiersTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = GroupsTable
	LabelEntitiesTable.ForeignKeys[0].RefTable = LabelsTable
	LabelEntitiesTable.ForeignKeys[1].RefTable = EntitiesTable
}
