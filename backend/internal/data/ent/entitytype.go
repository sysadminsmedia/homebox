// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entitytype"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/group"
)

// EntityType is the model entity for the EntityType schema.
type EntityType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// IsLocation holds the value of the "is_location" field.
	IsLocation bool `json:"is_location,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityTypeQuery when eager-loading is set.
	Edges              EntityTypeEdges `json:"edges"`
	group_entity_types *uuid.UUID
	selectValues       sql.SelectValues
}

// EntityTypeEdges holds the relations/edges for other nodes in the graph.
type EntityTypeEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Entities holds the value of the entities edge.
	Entities []*Entity `json:"entities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntityTypeEdges) GroupOrErr() (*Group, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading.
func (e EntityTypeEdges) EntitiesOrErr() ([]*Entity, error) {
	if e.loadedTypes[1] {
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntityType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitytype.FieldIsLocation:
			values[i] = new(sql.NullBool)
		case entitytype.FieldName, entitytype.FieldDescription, entitytype.FieldIcon, entitytype.FieldColor:
			values[i] = new(sql.NullString)
		case entitytype.FieldCreatedAt, entitytype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case entitytype.FieldID:
			values[i] = new(uuid.UUID)
		case entitytype.ForeignKeys[0]: // group_entity_types
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntityType fields.
func (_m *EntityType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitytype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case entitytype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case entitytype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case entitytype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case entitytype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case entitytype.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = value.String
			}
		case entitytype.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case entitytype.FieldIsLocation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_location", values[i])
			} else if value.Valid {
				_m.IsLocation = value.Bool
			}
		case entitytype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field group_entity_types", values[i])
			} else if value.Valid {
				_m.group_entity_types = new(uuid.UUID)
				*_m.group_entity_types = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntityType.
// This includes values selected through modifiers, order, etc.
func (_m *EntityType) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the EntityType entity.
func (_m *EntityType) QueryGroup() *GroupQuery {
	return NewEntityTypeClient(_m.config).QueryGroup(_m)
}

// QueryEntities queries the "entities" edge of the EntityType entity.
func (_m *EntityType) QueryEntities() *EntityQuery {
	return NewEntityTypeClient(_m.config).QueryEntities(_m)
}

// Update returns a builder for updating this EntityType.
// Note that you need to call EntityType.Unwrap() before calling this method if this EntityType
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *EntityType) Update() *EntityTypeUpdateOne {
	return NewEntityTypeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the EntityType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *EntityType) Unwrap() *EntityType {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntityType is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *EntityType) String() string {
	var builder strings.Builder
	builder.WriteString("EntityType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(_m.Icon)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteString(", ")
	builder.WriteString("is_location=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsLocation))
	builder.WriteByte(')')
	return builder.String()
}

// EntityTypes is a parsable slice of EntityType.
type EntityTypes []*EntityType
