// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entity"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entitytype"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/group"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// EntityTypeUpdate is the builder for updating EntityType entities.
type EntityTypeUpdate struct {
	config
	hooks    []Hook
	mutation *EntityTypeMutation
}

// Where appends a list predicates to the EntityTypeUpdate builder.
func (_u *EntityTypeUpdate) Where(ps ...predicate.EntityType) *EntityTypeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EntityTypeUpdate) SetUpdatedAt(v time.Time) *EntityTypeUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *EntityTypeUpdate) SetName(v string) *EntityTypeUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EntityTypeUpdate) SetNillableName(v *string) *EntityTypeUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EntityTypeUpdate) SetDescription(v string) *EntityTypeUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EntityTypeUpdate) SetNillableDescription(v *string) *EntityTypeUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EntityTypeUpdate) ClearDescription() *EntityTypeUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *EntityTypeUpdate) SetIcon(v string) *EntityTypeUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *EntityTypeUpdate) SetNillableIcon(v *string) *EntityTypeUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *EntityTypeUpdate) ClearIcon() *EntityTypeUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetColor sets the "color" field.
func (_u *EntityTypeUpdate) SetColor(v string) *EntityTypeUpdate {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *EntityTypeUpdate) SetNillableColor(v *string) *EntityTypeUpdate {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *EntityTypeUpdate) ClearColor() *EntityTypeUpdate {
	_u.mutation.ClearColor()
	return _u
}

// SetIsLocation sets the "is_location" field.
func (_u *EntityTypeUpdate) SetIsLocation(v bool) *EntityTypeUpdate {
	_u.mutation.SetIsLocation(v)
	return _u
}

// SetNillableIsLocation sets the "is_location" field if the given value is not nil.
func (_u *EntityTypeUpdate) SetNillableIsLocation(v *bool) *EntityTypeUpdate {
	if v != nil {
		_u.SetIsLocation(*v)
	}
	return _u
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (_u *EntityTypeUpdate) SetGroupID(id uuid.UUID) *EntityTypeUpdate {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *EntityTypeUpdate) SetGroup(v *Group) *EntityTypeUpdate {
	return _u.SetGroupID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *EntityTypeUpdate) AddEntityIDs(ids ...uuid.UUID) *EntityTypeUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *EntityTypeUpdate) AddEntities(v ...*Entity) *EntityTypeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// Mutation returns the EntityTypeMutation object of the builder.
func (_u *EntityTypeUpdate) Mutation() *EntityTypeMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *EntityTypeUpdate) ClearGroup() *EntityTypeUpdate {
	_u.mutation.ClearGroup()
	return _u
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *EntityTypeUpdate) ClearEntities() *EntityTypeUpdate {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *EntityTypeUpdate) RemoveEntityIDs(ids ...uuid.UUID) *EntityTypeUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *EntityTypeUpdate) RemoveEntities(v ...*Entity) *EntityTypeUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EntityTypeUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EntityTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EntityTypeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EntityTypeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EntityTypeUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entitytype.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EntityTypeUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := entitytype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntityType.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := entitytype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "EntityType.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Icon(); ok {
		if err := entitytype.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "EntityType.icon": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := entitytype.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "EntityType.color": %w`, err)}
		}
	}
	if _u.mutation.GroupCleared() && len(_u.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EntityType.group"`)
	}
	return nil
}

func (_u *EntityTypeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitytype.Table, entitytype.Columns, sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entitytype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(entitytype.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(entitytype.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(entitytype.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(entitytype.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(entitytype.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(entitytype.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(entitytype.FieldColor, field.TypeString)
	}
	if value, ok := _u.mutation.IsLocation(); ok {
		_spec.SetField(entitytype.FieldIsLocation, field.TypeBool, value)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.GroupTable,
			Columns: []string{entitytype.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.GroupTable,
			Columns: []string{entitytype.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EntityTypeUpdateOne is the builder for updating a single EntityType entity.
type EntityTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EntityTypeUpdateOne) SetUpdatedAt(v time.Time) *EntityTypeUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *EntityTypeUpdateOne) SetName(v string) *EntityTypeUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EntityTypeUpdateOne) SetNillableName(v *string) *EntityTypeUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EntityTypeUpdateOne) SetDescription(v string) *EntityTypeUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EntityTypeUpdateOne) SetNillableDescription(v *string) *EntityTypeUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EntityTypeUpdateOne) ClearDescription() *EntityTypeUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetIcon sets the "icon" field.
func (_u *EntityTypeUpdateOne) SetIcon(v string) *EntityTypeUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *EntityTypeUpdateOne) SetNillableIcon(v *string) *EntityTypeUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *EntityTypeUpdateOne) ClearIcon() *EntityTypeUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetColor sets the "color" field.
func (_u *EntityTypeUpdateOne) SetColor(v string) *EntityTypeUpdateOne {
	_u.mutation.SetColor(v)
	return _u
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (_u *EntityTypeUpdateOne) SetNillableColor(v *string) *EntityTypeUpdateOne {
	if v != nil {
		_u.SetColor(*v)
	}
	return _u
}

// ClearColor clears the value of the "color" field.
func (_u *EntityTypeUpdateOne) ClearColor() *EntityTypeUpdateOne {
	_u.mutation.ClearColor()
	return _u
}

// SetIsLocation sets the "is_location" field.
func (_u *EntityTypeUpdateOne) SetIsLocation(v bool) *EntityTypeUpdateOne {
	_u.mutation.SetIsLocation(v)
	return _u
}

// SetNillableIsLocation sets the "is_location" field if the given value is not nil.
func (_u *EntityTypeUpdateOne) SetNillableIsLocation(v *bool) *EntityTypeUpdateOne {
	if v != nil {
		_u.SetIsLocation(*v)
	}
	return _u
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (_u *EntityTypeUpdateOne) SetGroupID(id uuid.UUID) *EntityTypeUpdateOne {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetGroup sets the "group" edge to the Group entity.
func (_u *EntityTypeUpdateOne) SetGroup(v *Group) *EntityTypeUpdateOne {
	return _u.SetGroupID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *EntityTypeUpdateOne) AddEntityIDs(ids ...uuid.UUID) *EntityTypeUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *EntityTypeUpdateOne) AddEntities(v ...*Entity) *EntityTypeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// Mutation returns the EntityTypeMutation object of the builder.
func (_u *EntityTypeUpdateOne) Mutation() *EntityTypeMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (_u *EntityTypeUpdateOne) ClearGroup() *EntityTypeUpdateOne {
	_u.mutation.ClearGroup()
	return _u
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *EntityTypeUpdateOne) ClearEntities() *EntityTypeUpdateOne {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *EntityTypeUpdateOne) RemoveEntityIDs(ids ...uuid.UUID) *EntityTypeUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *EntityTypeUpdateOne) RemoveEntities(v ...*Entity) *EntityTypeUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// Where appends a list predicates to the EntityTypeUpdate builder.
func (_u *EntityTypeUpdateOne) Where(ps ...predicate.EntityType) *EntityTypeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EntityTypeUpdateOne) Select(field string, fields ...string) *EntityTypeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated EntityType entity.
func (_u *EntityTypeUpdateOne) Save(ctx context.Context) (*EntityType, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EntityTypeUpdateOne) SaveX(ctx context.Context) *EntityType {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EntityTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EntityTypeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EntityTypeUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := entitytype.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EntityTypeUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := entitytype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntityType.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := entitytype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "EntityType.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Icon(); ok {
		if err := entitytype.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "EntityType.icon": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Color(); ok {
		if err := entitytype.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "EntityType.color": %w`, err)}
		}
	}
	if _u.mutation.GroupCleared() && len(_u.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EntityType.group"`)
	}
	return nil
}

func (_u *EntityTypeUpdateOne) sqlSave(ctx context.Context) (_node *EntityType, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitytype.Table, entitytype.Columns, sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntityType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitytype.FieldID)
		for _, f := range fields {
			if !entitytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entitytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entitytype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(entitytype.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(entitytype.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(entitytype.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(entitytype.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(entitytype.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Color(); ok {
		_spec.SetField(entitytype.FieldColor, field.TypeString, value)
	}
	if _u.mutation.ColorCleared() {
		_spec.ClearField(entitytype.FieldColor, field.TypeString)
	}
	if value, ok := _u.mutation.IsLocation(); ok {
		_spec.SetField(entitytype.FieldIsLocation, field.TypeBool, value)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.GroupTable,
			Columns: []string{entitytype.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.GroupTable,
			Columns: []string{entitytype.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntityType{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
